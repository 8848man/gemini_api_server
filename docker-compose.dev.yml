version: '3.8'

services:
  # Development API Server with hot reload
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: gemini-api-dev
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=True
      - REDIS_URL=redis://redis-dev:6379/0
      - SECRET_KEY=dev-secret-key
      - API_KEY=dev-api-key
      - JWT_SECRET_KEY=dev-jwt-secret
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LOG_LEVEL=DEBUG
      - REQUESTS_PER_MINUTE=100
      - MAX_CONCURRENT_REQUESTS=10
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - redis-dev
    networks:
      - gemini-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for development
  redis-dev:
    image: redis:7.2-alpine
    container_name: gemini-redis-dev
    ports:
      - "6380:6379"  # 다른 포트 사용
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - gemini-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Test runner service
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: gemini-test
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis-dev:6379/1  # 다른 DB 사용
    volumes:
      - .:/app
    depends_on:
      - redis-dev
    networks:
      - gemini-dev-network
    profiles:
      - testing
    command: ["python", "-m", "pytest", "-v", "--cov=src", "--cov-report=html"]

networks:
  gemini-dev-network:
    driver: bridge

volumes:
  redis_dev_data:
    driver: local